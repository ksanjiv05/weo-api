user
phone number

offer
offer img
offer title
offer description
offer quntity
offer time
offer price
offer array of reels

100 Os/Offer/Creator (or Collector)

Each O within the context of an Offer represent a percentage point. One O=1%

genrateO() -> 100 -> add to network ;
genrateO

Every user has their unique O value relative to their monetary transaction volume :
x%/$1 of Offer price = (x)O/$1

//////
For example, let’s say an individual has done $1000 of business over 5 transactions, with each transaction earning her 82.4 Os on average. Her individual O value would be :
82.4/100 or 0.824 Os/$1 or $0.82/O
//transaction behavior will change over time so we can not make to calculation o value

//me added
if suppose user have right now total 500o then 500/100 or 5Os/1$ -> 0.2$/Os

The WEO platform or the network O price (tradable, interoperable O price) is determined
by the total aggregate individual O price average (My Os/$1)/Total $in Network =Network O value (rating/trust score)

For example, with 128,492 total users with an average O value price of $0.796/O across $7,594,955.78 of total network
transactions would make the current O price
$7,594,955.78 / 128,492 = $59.10 average transactions per user x $0.79 = $46 worth of Os per user.

Therefore current O price would be $46x 0.79 / 59.10 = $0.61

So as creators price their Offers with Os as discounts, the O amount relative to price is determined by the current network O price of $0.61/O

%My O value+%Offer access discount =Offer Access Price

The collector can access said Offer by the Os they have accrued at their own rate (transaction history) relative to the current O price.

So I’m the case of the first user example, whose personal O price was $0.82/O, if she is to access an Offer that requires her to have 340 Os at the network O price of $0.61/O, her cost would be the converted rate.

Current O price for Offer
340 x $0.61 = $207.40
Her O price for the same Offer
(207.40 x 100)/$0.82 = 265.63
She would only need to hold 265.63 Os instead of the 340 because of her O value generated from her transaction history

Overall O logic summary :

1. Every transaction per every Offer can generate up to 100 Os
2. Each O in the context of a transaction is worth 1%
3. Transaction histories generate an O valuation average for each user less than or equal to 100
4. Individual O valuation determines the cost of Os for that particular user across the platform/network
5. The O prices set for access and rewards/discounts are determined by network averages of average O valuations per user multiplied by the number of total users, then divided by total network transactions
6. Os do not have fungible values outside the network, though buying power in network is directly determined by proof of performance across the network, or average O price as described above

//--------------------------------------------------------//
MVP Testing\_
API Deployment
One Email Account to setup all accounts

SERVER - AWS (Amazon EC2) https://aws.amazon.com/ec2/?did=ft_card&trk=ft_card
configuration
RAM - 2 to 4 GB
DISK - 10 GB

STATIC_MEDIA_BUCKET - AWS S3 https://aws.amazon.com/s3/?did=ft_card&trk=ft_card

Authentication
Firebase Authentication

Payment Gateway
Razorpay - https://razorpay.com/payment-gateway/

We’ll discuss this and get clarity when we connect tomorrow:

O
100 Os/Offer/Creator (or Collector)

Each O within the context of an Offer represent a percentage point. One O=1%

Every user has their unique O value relative to their monetary transaction volume :
x%/$1 of Offer price = (x)O/$1

For example, let’s say an individual has done $1000 of business over 5 transactions, with each transaction earning her 82.4 Os on average. Her individual O value would be :
82.4/100 or 0.824 Os/$1 or $0.82/O

The WEO platform or the network O price (tradable, interoperable O price) is determined by the total aggregate individual O price average (My Os/$1)/Total $in Network =Network O value (rating/trust score)

For example, with 128,492 total users with an average O value price of $0.796/O across $7,594,955.78 of total network transactions would make the current O price
$7,594,955.78 / 128,492 = $59.10 average transactions per user x $0.79 = $46 worth of Os per user.

Therefore current O price would be $46x 0.79 / 59.10 = $0.61

So as creators price their Offers with Os as discounts, the O amount relative to price is determined by the current network O price of $0.61/O

%My O value+%Offer access discount =Offer Access Price

The collector can access said Offer by the Os they have accrued at their own rate (transaction history) relative to the current O price.

So I’m the case of the first user example, whose personal O price was $0.82/O, if she is to access an Offer that requires her to have 340 Os at the network O price of $0.61/O, her cost would be the converted rate.

Current O price for Offer
340 x $0.61 = $207.40
Her O price for the same Offer
(207.40 x 100)/$0.82 = 265.63
She would only need to hold 265.63 Os instead of the 340 because of her O value generated from her transaction history

Overall O logic summary :

1. Every transaction per every Offer can generate up to 100% of Os
2. Each O in the context of a transaction is worth 1% of the transaction amount.
3. Transaction histories generate an O valuation average for each user less than or equal to 100%
4. Individual O valuation determines the cost of Os for that particular user across the platform/network
5. The O prices set for access and rewards/discounts are determined by network averages of average O valuations per user multiplied by the number of total users, then divided by total network transactions
6. Os do not have fungible values outside the network, though buying power in network is directly determined by proof of performance across the network, or average O price as described above

//

wishlist
-> brands
-> offers
-> profiles
-> liked
->

if you give me access then of admin@weo.ai
i will able to setup these
aws
aws ec2
aws s3
mongodb
firebase
and you only need to give
razerpay

https://demos.creative-tim.com/soft-ui-flowbite-pro/

https://themes.coderthemes.com/konrix_r/dashboard

https://react.spruko.com/ynex-ts/preview/dashboards/crm/

https://themes.coderthemes.com/attex_tr/ecommerce

https://demos.creative-tim.com/black-dashboard-pro-react/?_ga=2.240594628.694247208.1704438868-1592849753.1704438868#/admin/dashboard

cleaning service cloths
we pick up cloths from home and clean that press and home delivery
giving subscription for priority and fast clean delivery.

and repair service

"dependencies": {
"@types/cors": "^2.8.13",
"axios": "^1.4.0",
"bcryptjs": "^2.4.3",
"cors": "^2.8.5",
"dotenv": "^16.3.1",
"eslint-plugin-security": "^1.7.1",
"express": "^4.18.2",
"express-validator": "^7.0.1",
"firebase-admin": "^11.9.0",
"helmet": "^7.0.0",
"joi": "^17.11.0",
"jsonwebtoken": "^9.0.0",
"langchain": "^0.0.122",
"mkdirp": "^2.1.5",
"mongoose": "^7.3.1",
"multer": "^1.4.5-lts.1",
"openai": "^3.3.0",
"rate-limiter-flexible": "^3.0.2",
"razorpay": "^2.9.2",
"socket.io": "^4.7.0",
"uuid": "^9.0.0"
},
"devDependencies": {
"@types/bcryptjs": "^2.4.2",
"@types/express": "^4.17.17",
"@types/jsonwebtoken": "^9.0.2",
"@types/mkdirp": "^1.0.2",
"@types/multer": "^1.4.7",
"@types/node": "^20.3.1",
"@types/uuid": "^9.0.2",
"concurrently": "^8.2.0",
"nodemon": "^2.0.22",
"typescript": "^5.1.3"
}
